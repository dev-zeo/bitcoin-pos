#!/sbin/openrc-run

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/zeo/.zeo" ]; then
	ZEOD_DEFAULT_DATADIR="/var/lib/zeo/.zeo"
else
	ZEOD_DEFAULT_DATADIR="/var/lib/zeod"
fi

ZEOD_CONFIGFILE=${ZEOD_CONFIGFILE:-/etc/zeo/zeo.conf}
ZEOD_PIDDIR=${ZEOD_PIDDIR:-/var/run/zeod}
ZEOD_PIDFILE=${ZEOD_PIDFILE:-${ZEOD_PIDDIR}/zeod.pid}
ZEOD_DATADIR=${ZEOD_DATADIR:-${ZEOD_DEFAULT_DATADIR}}
ZEOD_USER=${ZEOD_USER:-${ZEO_USER:-zeo}}
ZEOD_GROUP=${ZEOD_GROUP:-zeo}
ZEOD_BIN=${ZEOD_BIN:-/usr/bin/zeod}
ZEOD_NICE=${ZEOD_NICE:-${NICELEVEL:-0}}
ZEOD_OPTS="${ZEOD_OPTS:-${ZEO_OPTS}}"

name="Zeo Core Daemon"
description="Zeo cryptocurrency P2P network daemon"

command="/usr/bin/zeod"
command_args="-pid=\"${ZEOD_PIDFILE}\" \
		-conf=\"${ZEOD_CONFIGFILE}\" \
		-datadir=\"${ZEOD_DATADIR}\" \
		-daemon \
		${ZEOD_OPTS}"

required_files="${ZEOD_CONFIGFILE}"
start_stop_daemon_args="-u ${ZEOD_USER} \
			-N ${ZEOD_NICE} -w 2000"
pidfile="${ZEOD_PIDFILE}"

# The retry schedule to use when stopping the daemon. Could be either
# a timeout in seconds or multiple signal/timeout pairs (like
# "SIGKILL/180 SIGTERM/300")
retry="${ZEOD_SIGTERM_TIMEOUT}"

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${ZEOD_USER}:${ZEOD_GROUP}" \
	"${ZEOD_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${ZEOD_USER}:${ZEOD_GROUP}" \
	"${ZEOD_PIDDIR}"

	checkpath -f \
	-o ${ZEOD_USER}:${ZEOD_GROUP} \
	-m 0660 \
	${ZEOD_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${ZEOD_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run zeod."
		eerror "The setting must appear in ${ZEOD_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following "
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"Zeo Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
